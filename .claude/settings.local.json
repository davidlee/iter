{
  "permissions": {
    "allow": [
      "Bash(go get:*)",
      "Bash(go mod:*)",
      "Bash(gofumpt:*)",
      "Bash(golangci-lint run:*)",
      "Bash(mkdir:*)",
      "Bash(go test:*)",
      "Bash(go build:*)",
      "Bash(./vice --help)",
      "Bash(./vice entry)",
      "Bash(./vice:*)",
      "Bash(ls:*)",
      "Bash(XDG_CONFIG_HOME=/tmp/xdg-test ./vice entry)",
      "Bash(go run:*)",
      "Bash(cat:*)",
      "Bash(grep:*)",
      "Bash(git add:*)",
      "Bash(mv:*)",
      "Bash(git rm:*)",
      "Bash(find:*)",
      "Bash(rg:*)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:pkg.go.dev)",
      "Bash(just lint)",
      "Bash(go fmt:*)",
      "Bash(fd:*)",
      "Bash(d2:*)",
      "WebFetch(domain:d2lang.com)",
      "Bash(timeout 5s go test ./internal/ui/goalconfig -run TestGoalConfigurator_ElasticGoalIntegration)",
      "Bash(timeout 5s go test ./... -run TestGoalConfigurator)",
      "Bash(timeout 3s go test ./internal/ui/goalconfig -v)",
      "Bash(timeout 3s go test ./internal/integration -v)",
      "Bash(cp:*)",
      "Bash(command -v:*)",
      "Bash(go list:*)",
      "Bash(go vet:*)",
      "Bash(gofmt:*)",
      "Bash(just test:*)",
      "Bash(just format)",
      "Bash(perl:*)",
      "Bash(just lint-single:*)",
      "Bash(VICE_CONTEXT=work ./vice context show)",
      "Bash(VICE_CONTEXT=work ./vice todo --markdown)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:zk-org.github.io)",
      "Bash(timeout 5s go test ./...)",
      "Bash(zk index:*)",
      "Bash(zk list:*)",
      "Bash(sqlite3:*)",
      "Bash(ZK_NOTEBOOK_DIR=/home/david/dev/vice/temp/zk zk list --tag compatibility --format \"{{id}} - {{title}} - {{tags}}\")",
      "Bash(git commit:*)",
      "Bash(zk:*)",
      "Bash(sed:*)",
      "Bash(gh pr view:*)",
      "mcp__serena__get_current_config",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__list_dir",
      "mcp__serena__find_file",
      "mcp__serena__search_for_pattern",
      "mcp__serena__find_symbol",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_referencing_symbols"
    ],
    "deny": []
  }
}